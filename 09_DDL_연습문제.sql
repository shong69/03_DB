CREATE TABLE MAJOR(
	MAJOR_NO NUMBER PRIMARY KEY,
	MAJOR_NM VARCHAR2(100) NOT NULL
);

COMMENT ON COLUMN MAJOR.MAJOR_NO IS '학과번호';
COMMENT ON COLUMN MAJOR.MAJOR_NM IS '학과명';

INSERT INTO MAJOR VALUES(111, '영어통번역학과');
INSERT INTO MAJOR VALUES(222, '기계공학과');
INSERT INTO MAJOR VALUES(333, '시각디자인학과');
INSERT INTO MAJOR VALUES(444, '유아교육학과');
INSERT INTO MAJOR VALUES(555, '토목학과');


SELECT * FROM MAJOR;
----------------------------
CREATE TABLE STUDENT(
	STUDENT_ID NUMBER PRIMARY KEY,
	STUDENT_NAME VARCHAR2(29) NOT NULL,
	GENDER VARCHAR2(3) CHECK(GENDER IN('남', '여')),
	BIRTH DATE,
	MAJOR_NO NUMBER, 
	CONSTRAINT FK_DELETE FOREIGN KEY(MAJOR_NO) REFERENCES MAJOR(MAJOR_NO) ON DELETE SET NULL
	
);
DROP TABLE STUDENT;

COMMENT ON COLUMN STUDENT.STUDENT_ID IS '학번';
COMMENT ON COLUMN STUDENT.STUDENT_NAME IS '이름';
COMMENT ON COLUMN STUDENT.GENDER IS '성별';
COMMENT ON COLUMN STUDENT.BIRTH IS '생년월일';
COMMENT ON COLUMN STUDENT.MAJOR_NO IS '전공학과번호';

SELECT * FROM STUDENT;

INSERT INTO STUDENT VALUES(201800808, '김소영', '여', '1999-06-29', 111);
INSERT INTO STUDENT VALUES(202255511, '박정은', '여', '2003-10-10', 555);
INSERT INTO STUDENT VALUES(200199911, '장용규', '남', '1981-12-29', 333);
INSERT INTO STUDENT VALUES(199848852, '황규득', '남', '1978-11-11', 444);
INSERT INTO STUDENT VALUES(201522244, '최고심', '여', '1996-08-06', 222);


ALTER TABLE MAJOR RENAME COLUMN MAJOR_NM TO MAJOR_NAME;

SELECT * FROM MAJOR;


--------------------------------------------------------------------------------


CREATE TABLE CATEGORIES (
	CATEGORY_ID NUMBER PRIMARY KEY,
	CATEGORY_NAME VARCHAR2(100) CONSTRAINT CATE_NAME_UNI UNIQUE
);
SELECT * FROM CATEGORIES;
DROP TABLE CATEGORIES;

CREATE TABLE PRODUCTS(
	PRODUCT_ID NUMBER PRIMARY KEY,
	PRODUCT_NAME VARCHAR2(100) CONSTRAINT PRO_NAME_NN NOT NULL,
	CATEGORY NUMBER REFERENCES CATEGORIES(CATEGORY_ID),
	PRICE NUMBER DEFAULT 0,
	STOCK_QUANTITY NUMBER DEFAULT 0
	
);


CREATE TABLE CUSTOMERS(
	CUSTOMER_ID NUMBER PRIMARY KEY,
	NAME VARCHAR2(20) CONSTRAINT NAME_NN NOT NULL,
	GENDER CHAR(3) CONSTRAINT GENDER_CK CHECK(GENDER IN('남', '여')),
	ADDRESS VARCHAR2(100),
	PHONE VARCHAR2(30)
);



CREATE TABLE ORDERS(
	ORDER_ID NUMBER PRIMARY KEY,
	CUSTOMER_ID NUMBER REFERENCES CUSTOMERS(CUSTOMER_ID) ON DELETE CASCADE,
	ORDER_DATE DATE DEFAULT SYSDATE,
	STATUS CHAR(1) DEFAULT 'N' CONSTRAINT STATUS_CK CHECK(STATUS IN ('Y', 'N'))
	 
);


CREATE TABLE ORDER_DETAILS(
	ORDER_DETAIL_ID NUMBER PRIMARY KEY,
	ORDER_ID NUMBER REFERENCES ORDERS(ORDER_ID) ON DELETE CASCADE,
	PRODUCT_ID NUMBER REFERENCES PRODUCTS(PRODUCT_ID) ON DELETE SET NULL,
	QUANTITY NUMBER,
	PRICE_PER_UNIT NUMBER
);

INSERT INTO CATEGORIES VALUES(1, '스마트폰');
INSERT INTO CATEGORIES VALUES(2, 'TV');
INSERT INTO CATEGORIES VALUES(3, 'Gaming');


INSERT INTO PRODUCTS VALUES(101, 'Apple iphone 12', 1, 1500000, 30);
INSERT INTO PRODUCTS VALUES(102, 'Samsung Galaxy S24', 1, 1800000, 50);
INSERT INTO PRODUCTS VALUES(201, 'LG OLED TV', 2, 3600000, 20);
INSERT INTO PRODUCTS VALUES(301, 'Sony PlayStation 5', 3, 700000, 25);

INSERT INTO CUSTOMERS VALUES(1, '홍길동', '남', '서울시 성동구 왕십리', '010-1111-2222');
INSERT INTO CUSTOMERS VALUES(2, '유관순', '여', '서울시 종로구 안국동', '010-3333-1111');

INSERT INTO ORDERS VALUES(576, 1, '2024-02-29', 'N');
INSERT INTO ORDERS VALUES(978, 2, '2024-03-11', 'Y');
INSERT INTO ORDERS VALUES(777, 2, '2024-03-11', 'N');
INSERT INTO ORDERS VALUES(134, 1, '2022-12-25', 'Y');
INSERT INTO ORDERS VALUES(499, 1, '2020-01-03', 'Y');


INSERT INTO ORDER_DETAILS VALUES(111,576, 101, 1, 1500000);
INSERT INTO ORDER_DETAILS VALUES(222,978, 201, 2, 3600000);
INSERT INTO ORDER_DETAILS VALUES(333,978, 102, 1, 1800000);
INSERT INTO ORDER_DETAILS VALUES(444,777, 301, 5, 700000);
INSERT INTO ORDER_DETAILS VALUES(555,134, 102, 1, 1800000);
INSERT INTO ORDER_DETAILS VALUES(666,499, 201, 3, 3600000);


COMMIT;

SELECT * FROM ORDER_DETAILS;

--1. 쇼핑몰 관리자가 주문은 받았으나, 아직 처리가 안된 주문을 처리하려고 한다. 현재 주문 내역 중 아직 처리되지 않은 주문을 조회하시오. 😀
--(고객명, 주문일, 처리상태)

SELECT NAME 고객명, ORDER_DATE 주문일, STATUS 처리상태
FROM ORDERS
JOIN CUSTOMERS USING(CUSTOMER_ID)
WHERE STATUS = 'N';



--2. 홍길동 고객이 이번년도에 본인이 주문한 전체 내역을 조회하고자 한다. 
--주문번호, 주문날짜, 처리상태 조회하시오
SELECT ORDER_ID 주문번호, ORDER_DATE 주문날짜, STATUS 처리상태
FROM ORDERS 
JOIN CUSTOMERS USING(CUSTOMER_ID)
WHERE EXTRACT(YEAR FROM ORDER_DATE)='2024'
AND NAME = '홍길동';


--3. 유관순 고객이 지금껏 주문한 상품의 수량 별 금액을 조회하려고 한다.
--주문번호, 상품명, 수량, 개별금액, 주문별금액을 조회하시오 

SELECT ORDER_ID 주문번호, PRODUCT_NAME 상품명, QUANTITY 수량, PRICE_PER_UNIT 개별금액, QUANTITY*PRICE_PER_UNIT 주문별금액합계
FROM ORDERS
JOIN ORDER_DETAILS USING(ORDER_ID)
JOIN PRODUCTS USING(PRODUCT_ID)
JOIN CUSTOMERS USING(CUSTOMER_ID)
WHERE NAME = '유관순'
ORDER BY "수량" DESC;



